# Copyright (C) 2021 The ORT Project Authors (see <https://github.com/oss-review-toolkit/ort/blob/main/NOTICE>)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Ap

name: Docker Build and Deploy

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  IMAGE_BASE_NAME: ort
  REGISTRY: ghcr.io

jobs:
  docker_push:
    name: Build Docker Image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3

      - name: Add version to gha env
        run: cat .versions >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Identify ORT revision build
        run: echo "Building image with revision ${GITHUB_SHA::10}"

      # Base Linux + Temurin 11 Image
      - name: Extract base metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ort/base
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE_NAME }}/base

      - name: Identify base image
        run: echo "Will be tagged as ${{ steps.meta.outputs.tags }} and labeled as ${{ steps.meta.outputs.labels }}"

      - name: Build base
        uses: docker/build-push-action@v3
        with:
          context: .
          target: base
          load: true
          build-args: |
            ORT_VERSION=${GITHUB_SHA}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.IMAGE_BASE_NAME }}/base:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Components
      - name: Extract components metadata (tags, labels) for Docker
        id: meta_components
        uses: docker/metadata-action@v4
        with:
          images: |
            ort/components
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE_NAME }}/components

      - name: Identify components image
        run: echo "Will be tagged as ${{ steps.meta_components.outputs.tags }} and labeled as ${{ steps.meta_components.outputs.labels }}"

      - name: Build components container
        uses: docker/build-push-action@v3
        with:
          context: .
          target: components
          load: true
          build-args: |
            ORT_VERSION=${GITHUB_SHA::10}
            ANDROID_CMD_VERSION=${{ env.ANDROID_CMD_VERSION }}
            BOWER_VERSION=${{ env.BOWER_VERSION }}
            COCOAPODS_VERSION=${{ env.COCOAPODS_VERSION }}
            COMPOSER_VERSION=${{ env.COMPOSER_VERSION }}
            CONAN_VERSION=${{ env.CONAN_VERSION }}
            GO_DEP_VERSION=${{ env.GO_DEP_VERSION }}
            GO_VERSION=${{ env.GO_VERSION }}
            HASKELL_STACK_VERSION=${{ env.HASKELL_VERSION }}
            NODEJS_VERSION=${{ env.NODEJS_VERSION }}
            NPM_VERSION=${{ env.NPM_VERSION }}
            PIPTOOL_VERSION=${{ env.PIPTOOL_VERSION }}
            PNPM_VERSION=${{ env.PNPM_VERSION }}
            PYENV_GIT_TAG=${{ env.PYENV_GIT_TAG }}
            PYTHON_INSPECTOR_VERSION=${{ env.PYTHON_INSPECTOR_VERSION }}
            PYTHON_PIPENV_VERSION=${{ env.PYTHON_PIPENV_VERSION }}
            PYTHON_POETRY_VERSION=${{ env.PYTHON_POETRY_VERSION }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            RUBY_VERSION=${{ env.RUBY_VERSION }}
            RUST_VERSION=${{ env.RUST_VERSION }}
            SBT_VERSION=${{ env.SBT_VERSION }}
            SCANCODE_VERSION=${{ env.SCANCODE_VERSION }}
            YARN_VERSION=${{ env.YARN_VERSION }}

          tags: |
            ${{ steps.meta_components.outputs.tags }}
            ${{ env.IMAGE_BASE_NAME }}/components
          labels: ${{ steps.meta_components.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ORT ditribution
      - name: Extract ortdist metadata (tags, labels) for Docker
        id: meta_ortdist
        uses: docker/metadata-action@v4
        with:
          images: |
            ort/ortdist
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE_NAME }}/ortdist

      - name: Identify ort binary distribution image
        run: echo "Will be tagged as ${{ steps.meta_ortdist.outputs.tags }} and labeled as ${{ steps.meta_ortdist.outputs.labels }}"

      - name: Build ortdist container
        uses: docker/build-push-action@v3
        with:
          context: .
          target: ortdist
          load: true
          build-args: |
            ORT_VERSION=${GITHUB_SHA::10}
          tags: ${{ steps.meta_ortdist.outputs.tags }}
          labels: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Ort runtime container
      - name: Extract runtime image metadata (tags, labels) for Docker
        id: meta_ort
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE_NAME }}/ort

      - name: Identify ort runtime container
        run: echo "Will be tagged as ${{ steps.meta_ort.outputs.tags }} and labeled as ${{ steps.meta_ort.outputs.labels }}"

      - name: Build ort container
        uses: docker/build-push-action@v3
        with:
          context: .
          target: run
          push: true #${{ github.event_name != 'pull_request' }}
          build-args: |
            ORT_VERSION=${GITHUB_SHA}
          tags: ${{ steps.meta_ort.outputs.tags }}
          labels: ${{ steps.meta_ort.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
